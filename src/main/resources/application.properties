# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Connection url for the database
spring.datasource.url = jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:trackrepository}
spring.database.driverClassName=org.postgresql.Driver
# Username and password
spring.datasource.username = ${DB_USER:trackrepository}
#Don't replace, the password is (actually) 'mysecretpassword'
spring.datasource.password = ${DB_PASSWORD:trackrepository}
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties 
# (the prefix is stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql = false
# Hibernate ddl auto (validate, create, create-drop, update): 
# with "update" the database schema will be automatically updated 
# accordingly to java entities found in the project
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.spatial.dialect.postgis.PostgisDialect

# ===============================
# = KAFKA
# ===============================
kafka.consumer.auto-offset-reset = ${KAFKA_AUTO_RESET:earliest}
kafka.consumer.group-id = ${KAFKA_GROUPID:trackGroup}
kafka.topic.track = ${KAFKA_TRACK_TOPIC:trackTopic}
kafka.server = ${KAFKA_SERVER_HOST:10.200.10.1}:${KAFKA_SERVER_PORT:9092}

# ===============================
# = ADSB
# ===============================
adsb.server=${ADSB_SERVER_HOST:pub-vrs.adsbexchange.com}
adsb.port=${ADSB_SERVER_PORT:32005}
